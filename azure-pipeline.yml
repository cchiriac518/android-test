name: AutoTagging-$(Date:dd.MM)

trigger:
  branches:
    include:
      - main
      - stage

  paths:
    exclude:
      - gradle.properties

variables:
  - group: Mobile-Apps

resources:
    repositories:
    - repository: test-app
      endpoint: github_sc
      name: cchiriac518/android-app
      ref: refs/heads/develop
      type: github
  
stages: 
- stage: AutoTagging
  jobs:
  - job: AutoTagging
    pool:
      vmImage: "macOS-11"
      
    steps:
    
    - checkout: self 
      fetchTags: true 
      persistCredentials: true
      
    - checkout: test-app
      persistCredentials: true
      fetchTags: true

    - script: |
        cd android-test 
        gradle clean test
      displayName: 'Run UnitTests'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/build/test-results/test/TEST-*.xml'
        failTaskOnFailedTests: true
        searchFolder: '$(System.DefaultWorkingDirectory)/android-test'
      condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'main'))
      displayName: 'Publish Test Results'

    - ${{ if eq(variables['Build.SourceBranchName'], 'stage') }}:

      - script: brew install gnu-sed
        displayName: 'Install gsedd'

      - script: |
          cd android-test
          
          VERSION_NAME=$(grep -E '^VERSION_NAME=' gradle.properties | cut -d'=' -f2 | tr -d '[:space:]')
          VERSION_CODE=$(grep -E '^VERSION_CODE=' gradle.properties | cut -d'=' -f2 | tr -d '[:space:]')

          # Concatenate VERSION_NAME and VERSION_CODE with a period as the separator
          LAST_V="${VERSION_NAME}.${VERSION_CODE}"

          # Print the value of LAST_V

          IFS='.' read -ra VERSION_PARTS <<< "$LAST_V"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          BUILD=${VERSION_PARTS[3]}

          BUILD=$((BUILD+1))

          NEW_VERSION_CODE="${BUILD}"
          
          gsed -i "s/${VERSION_CODE}/${NEW_VERSION_CODE}/" ./gradle.properties

          git config --global user.email "az-pipeline@gmail.com"
          git config --global user.name "az-pipeline"

          git add gradle.properties
          git commit -m "Updated version code"
          git push origin HEAD:$(Build.SourceBranch)
          
        displayName: 'Update version in gradle properties file'

    - ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
      
      - script: brew install gnu-sed
        displayName: 'Install gsed'

      - script: |
          cd android-test
          git pull
          VERSION_NAME=$(grep -E '^VERSION_NAME=' gradle.properties | cut -d'=' -f2 | tr -d '[:space:]')
          VERSION_CODE=$(grep -E '^VERSION_CODE=' gradle.properties | cut -d'=' -f2 | tr -d '[:space:]')
          LAST_V="${VERSION_NAME}.${VERSION_CODE}"

          IFS='.' read -ra VERSION_PARTS <<< "$LAST_V"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          BUILD=${VERSION_PARTS[3]}
          
          PATCH=$((PATCH+1))

          if [[ $PATCH -eq 10 ]]; then
            MINOR=$((MINOR+1))
            PATCH=0
          fi
          
          if [[ $MINOR -eq 10 ]]; then
            MAJOR=$((MAJOR+1))
            MINOR=0
          fi

          NEW_VERSION_NAME="${MAJOR}.${MINOR}.${PATCH}"

          
          echo "this is the new version $NEW_VERSION_NAME.$BUILD"

          gsed -i "s/${VERSION_NAME}/${NEW_VERSION_NAME}/" ./gradle.properties

          git config --global user.email "az-pipeline@gmail.com"
          git config --global user.name "az-pipeline"

          git add gradle.properties
          git commit -m "Updated version code"
          git push origin HEAD:$(Build.SourceBranch)

          git pull
          git checkout stage
          VERSION_NAME=$(grep -E '^VERSION_NAME=' gradle.properties | cut -d'=' -f2 | tr -d '[:space:]')
          gsed -i "s/${VERSION_NAME}/${NEW_VERSION_NAME}/" ./gradle.properties
          git add gradle.properties
          git commit -m "Updated version code"
          git push origin HEAD:stage

          VERSION_NAME=$(grep -E '^VERSION_NAME=' gradle.properties | cut -d'=' -f2 | tr -d '[:space:]')
          VERSION_CODE=$(grep -E '^VERSION_CODE=' gradle.properties | cut -d'=' -f2 | tr -d '[:space:]')
          NEW_TAG="${VERSION_NAME}.${VERSION_CODE}"
          echo "Creating Git tag $NEW_TAG"
          git tag $NEW_TAG
          git push origin --tags
          echo "##vso[task.setvariable variable=NEW_TAG]$NEW_TAG"
        displayName: 'Create Updated Tag and Push'

      - script: |
          cd android-app
          git fetch --all
          git checkout develop
          git config --global user.email "az-pipeline@gmail.com"
          git config --global user.name "az-pipeline"

          SDK_VERSION=$(awk -F ":" '/com\.github\.aacom/ {print $NF}' build.gradle | grep -oE "[0-9]+(\.[0-9]+)+\.[0-9]+")
          gsed -i "s/${SDK_VERSION}/${NEW_TAG}/" ./build.gradle
          git add .
          git commit -m "Updated android-sdk dependency to latest version"
          git push
        displayName: 'Update sdk version in main app'

      # - script: |
      #     cd android-test
      #     git fetch --all --tags
      #     echo "Creating PR main->stage"
      #     gh pr create --base stage --head $(Build.SourceBranch) --title "Sync stage with main" --body "Sync stage with main"
      #   displayName: 'Create PR to update develop branch with new version'




          # VERSION_NAME=$(grep -E '^VERSION_NAME=' gradle.properties | cut -d'=' -f2 | tr -d '[:space:]')
          # VERSION_CODE=$(grep -E '^VERSION_CODE=' gradle.properties | cut -d'=' -f2 | tr -d '[:space:]')
          # LAST_V="${VERSION_NAME}.${VERSION_CODE}"

          # IFS='.' read -ra VERSION_PARTS <<< "$LAST_V"
          # MAJOR=${VERSION_PARTS[0]}
          # MINOR=${VERSION_PARTS[1]}
          # PATCH=${VERSION_PARTS[2]}
          # BUILD=${VERSION_PARTS[3]}
          
          # PATCH=$((PATCH+1))

          # if [[ $PATCH -eq 10 ]]; then
          #   MINOR=$((MINOR+1))
          #   PATCH=0
          # fi
          
          # if [[ $MINOR -eq 10 ]]; then
          #   MAJOR=$((MAJOR+1))
          #   MINOR=0
          # fi

          # NEW_VERSION_NAME="${MAJOR}.${MINOR}.${PATCH}"

          
          # echo "this is the new version $NEW_VERSION_NAME.$$BUILD"

          # gsed -i "s/${VERSION_NAME}/${NEW_VERSION_NAME}/" ./gradle.properties

          # git add gradle.properties
          # git commit -m "Updated version code"
          # git push origin HEAD:$(Build.SourceBranch)


          # NEW_TAG="${VERSION_NAME}.${VERSION_CODE}"
          # git pull
          # git checkout stage
          # VERSION_NAME=$(grep -E '^VERSION_NAME=' gradle.properties | cut -d'=' -f2 | tr -d '[:space:]')
          # gsed -i "s/${VERSION_NAME}/${NEW_VERSION_NAME}/" ./gradle.properties
          # git add gradle.properties
          # git commit -m "Updated version code"
          # git push origin HEAD:stage